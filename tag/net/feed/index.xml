<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>.NET &#8211; Shreyas Jejurkar Blog</title>
	<atom:link href="https://shreyasjejurkar.github.io/testwebsite/tag/net/feed/" rel="self" type="application/rss+xml" />
	<link>https://shreyasjejurkar.github.io/testwebsite/</link>
	<description></description>
	<lastBuildDate>Wed, 04 May 2022 07:09:49 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>List of Podcasts channels for .NET C# developers</title>
		<link>https://shreyasjejurkar.github.io/testwebsite/2022/04/07/list-of-podcasts-channels-for-net-csharp-developers/</link>
		
		<dc:creator><![CDATA[ShreyasJejurkar]]></dc:creator>
		<pubDate>Thu, 07 Apr 2022 09:20:02 +0000</pubDate>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[dotnet]]></category>
		<guid isPermaLink="false">https://mccshreyas.com/?p=741</guid>

					<description><![CDATA[Just like I have aggregated YouTube channels for .NET developers, with this post I will be sharing the list of podcasts channel that you can consider listening to in order to keep up to date with .NET and related stuff. Because taking screen time off is important but learning and curiosity should not be stopped. The [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Just like I have aggregated <a href="https://shreyasjejurkar.github.io/testwebsite/2022/01/24/list-of-youtube-channels-for-net-csharp-developers/" target="_blank" rel="noreferrer noopener">YouTube channels for .NET developers</a>, with this post I will be sharing the list of podcasts channel that you can consider listening to in order to keep up to date with .NET and related stuff. Because taking screen time off is important but learning and curiosity should not be stopped.</p>



<ol><li><a target="_blank" href="https://open.spotify.com/show/2DgUE1Iyl9cZxzzvUUIPBK?si=070d53e9036f4bf6" rel="noreferrer noopener">The Unhandled Exception Podcast</a></li><li><a target="_blank" href="https://open.spotify.com/show/0Zbp6m8y06n2zlPPs59DEX?si=3202e41319b04e5e" rel="noreferrer noopener">Adventures in .NET</a></li><li><a target="_blank" href="https://open.spotify.com/show/6FIM18ZIqQvuX7d1TA9rbZ?si=13007e795b9e4e09" rel="noreferrer noopener">The .NET Core Podcast</a></li><li><a target="_blank" href="https://open.spotify.com/show/6X2km5VppEVYIdVjExWlgt?si=03501505ed9446a5" rel="noreferrer noopener">Null Pointers</a></li><li><a target="_blank" href="https://open.spotify.com/show/6griBeHq63dVJ1xHv52tQe?si=9ee47ac002444612" rel="noreferrer noopener">no dogma podcast</a></li><li><a target="_blank" href="https://open.spotify.com/show/0nLT0qByLhR8L6cR5rDZcV?si=b77223fdee9f465f" rel="noreferrer noopener">DevTalk with Kerry W. Lothrop</a></li><li><a target="_blank" href="https://open.spotify.com/show/5tz9eGgXtNHmq3WVD3EwYx?si=20d6af153d614b38" rel="noreferrer noopener">.NET Rocks!</a></li><li><a target="_blank" href="https://open.spotify.com/show/1GXN20wpTG0yWGc6PSKz3f?si=ec6670174e514541" rel="noreferrer noopener">The Productive C# Podcas</a>t</li></ol>



<p>As you can see the list is not as huge as YouTube channels, but make sure you give it a try to listen to them. Let me know in the comment section below if I miss any channel to add.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>List of YouTube channels for .NET C# developers</title>
		<link>https://shreyasjejurkar.github.io/testwebsite/2022/01/24/list-of-youtube-channels-for-net-csharp-developers/</link>
		
		<dc:creator><![CDATA[ShreyasJejurkar]]></dc:creator>
		<pubDate>Mon, 24 Jan 2022 07:29:16 +0000</pubDate>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[dotnet]]></category>
		<category><![CDATA[youtube]]></category>
		<guid isPermaLink="false">https://mccshreyas.com/?p=720</guid>

					<description><![CDATA[Following is the list of youtube channels that I have aggregated for .NET C# (Csharp) developers. I personally follow them every day and subscribed. Please note that this does not represent any kind of ranking. I would suggest going through them one by one looking at their content and playlist section and if you are [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Following is the list of youtube channels that I have aggregated for .NET C# (Csharp) developers. I  personally follow them every day and subscribed. Please note that this does not represent any kind of ranking. </p>



<p>I would suggest going through them one by one looking at their content and playlist section and if you are interested give them a sub! Along the time, I will keep this list updated, if I missed someone, please let me know in the comment section below! </p>



<ol><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/dotNET" target="_blank">Official .NET channel </a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/NETFoundation" target="_blank">.NET Foundation</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/RawCoding" target="_blank">Raw Coding</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/Elfocrash" target="_blank">Nick Chapsa</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/user/IAmTimCorey" target="_blank">Tim Corey</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/channel/UCRs-PO48PbbS0l7bBhbu5CA" target="_blank">Ak Academy</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/shanselman" target="_blank">Scott Hanselman</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/AngelSix" target="_blank">AngelSix</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/BrianLagunas" target="_blank">Brian Lagunas</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/Codewrinkles" target="_blank">Codewrinkles</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/PhatBoyG" target="_blank">Chris Patterson</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/CodingMilitia" target="_blank">Coding Militia</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/CuriousDrive" target="_blank">Curious Drive</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/DevMentors" target="_blank">DevMentors</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/DmitriNesteruk" target="_blank">Dmitri Nesteruk</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/DotNetCoreCentral" target="_blank">DotNet Core Central</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/FrankLiuSoftware" target="_blank">Frank Liu</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/GavinLon" target="_blank">Gavin Lon</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/HassanHabib" target="_blank">Hassan Habib</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/csharpfritz" target="_blank">Jeffery T. Fritz</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/binarythistle" target="_blank">Les Jackson</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/RahulNath" target="_blank">Rahul Nath</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/channel/UC3RKA4vunFAfrfxiJhPEplw" target="_blank">CodeOpinion</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/Dotnet-tricks" target="_blank">Dot Net Tricks</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/Dotnetos" target="_blank">Dotnetos</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/JamesMontemagno" target="_blank">James Montemagno</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/NTFAQGuy" target="_blank">John Savill&#8217;s Technical Training</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/Csharp-video-tutorialsBlogspot" target="_blank">kudvenkat </a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/visualstudio" target="_blank">Microsoft Visual Studio</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/NDCConferences" target="_blank">NDC Conferences</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/XamarinDevelopers" target="_blank">Xamarin Developers</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/Ardalis" target="_blank">Ardalis</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/GeraldVersluis" target="_blank">Gerald Versluis</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/AndreaAngella" target="_blank">Andrea Angella</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/c/WesDoyle" target="_blank">Wes Doyle</a></li><li><a rel="noreferrer noopener" href="https://www.youtube.com/channel/UC5P4o4uvwae7r3_xvaKTutA" target="_blank">Peter</a></li><li><a href="https://www.youtube.com/c/RainerStropek11" target="_blank" rel="noreferrer noopener">Rainer Stropek</a></li></ol>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Clean Architecture with C# .NET</title>
		<link>https://shreyasjejurkar.github.io/testwebsite/2021/04/22/clean-architecture-with-csharp-net/</link>
		
		<dc:creator><![CDATA[ShreyasJejurkar]]></dc:creator>
		<pubDate>Thu, 22 Apr 2021 08:11:28 +0000</pubDate>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[architecture]]></category>
		<category><![CDATA[csharp]]></category>
		<guid isPermaLink="false">https://mccshreyas.com/?p=629</guid>

					<description><![CDATA[Today, in this post I will walk you through the basics and important concepts related to Clean architecture with .NET.&#160;&#160; What is Clean Architecture Clean architecture is the next iteration of the very well know architecture patterns that we used to see in the past like Hexagonal, Onion, and Screaming architecture. This architecture is by [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Today, in this post I will walk you through the basics and important concepts related to Clean architecture with .NET.&nbsp;&nbsp;</p>



<p><strong>What is Clean Architecture</strong></p>



<p>Clean architecture is the next iteration of the very well know architecture patterns that we used to see in the past like Hexagonal, Onion, and Screaming architecture. This architecture is by no means a silver bullet or first-class solution to all architecture problems or complexities that we face today. This architecture just tries to lower the complexity, coupling between layers, and tries to increases cohesion.&nbsp;&nbsp;</p>



<p>The important factor of this architecture is the domain-centric nature. In past, we used to see the database-centric architecture or mostly consider as 3-layer architecture. In those at the very bottom we have the database (SQL or MySQL) then we have database access layer (ORM) then business logic layer (Service layer) and then at the top we have the presentation layer (UI, MVC). This architecture is OK for simple apps and is used widely today as well. But for complex domains and continuously changing requirements in today’s world, this architecture falls apart because of its tight coupling between layers. As in that architecture, each layer knows what its dependent layer is doing. So, if there any change requirement, the cost of change spans across this all layer, and hence it is hard to maintain and keep track of.&nbsp;&nbsp;</p>



<p>So clean architecture tries to solve this problem by keeping the domain in the center. So, although if there any change we can make a change to the domain without affecting another layer much or lowering the cost of change. And also, the important point to note is that all dependencies point inwards in the layer and there will no outward dependencies. And if the inner layer wants to access services from the outer layer, it will depend upon abstractions defined by the inner layer and not on the concrete implementation.&nbsp;&nbsp;</p>



<p>Now we will go to each layer one by one and we will talk about a simple example of a School Management System so that you can understand what will go in each layer and how they contribute to the overall system. </p>



<figure class="wp-block-image size-large"><a href="https://mccshreyas.files.wordpress.com/2021/07/cleanarchitecture-1.png"><img decoding="async" width="971" height="675" src="https://mccshreyas.files.wordpress.com/2021/07/cleanarchitecture-1.png?w=971" alt="" class="wp-image-680" srcset="https://shreyasjejurkar.github.io/testwebsite/wp-content/uploads/2021/07/cleanarchitecture-1.png 971w, https://shreyasjejurkar.github.io/testwebsite/wp-content/uploads/2021/07/cleanarchitecture-1-300x209.png 300w, https://shreyasjejurkar.github.io/testwebsite/wp-content/uploads/2021/07/cleanarchitecture-1-768x534.png 768w" sizes="(max-width: 971px) 100vw, 971px" /></a></figure>



<p></p>



<p></p>



<p><strong>Domain Layer&nbsp;</strong></p>



<p>This is the center of this architecture. This will contain all domain entities, custom exceptions, constant values, and anything related to the core domain. This layer contains enterprise-wide logic, so this might be shared across multiple applications as a Nuget package, so make sure to include the things which are core in the domain. For example, in our School Management System, the <code>Student</code>, <code>Teacher</code>, <code>Class</code> will be the domain entities because without these entities the School Management System won&#8217;t even work and won’t even make sense. Similarly, <code>StudentNotFoundException</code>, <code>ClassroomFullException</code> will be the custom exception that we can have in this layer. Along with this, we can have DomainEvents as well like <code>StudentRegisteredEvent</code>, <code>ClassroomFullEvent</code>, so that other parts of the application can subscribe to this event and can perform their task based on business logic.&nbsp;&nbsp;</p>



<pre class="wp-block-syntaxhighlighter-code">namespace CleanArchitecture.Domain
{
    public class Student
    {
         public int Id { get; set; }
         public string Name { get; set; }
         // other domain fields
    }
}</pre>



<p><strong>Application Layer&nbsp;</strong></p>



<p>This is an important layer in this architecture because this is where you will write your business logic based on various use cases and requirements. As this layer depends on the domain layer, you will have a project reference of the domain project on this project so that this layer will be able to access domain-related things. In contrast to Service-Repository architecture, this is your Service layer. This layer will get input data from the presentation layer and will do processing on it based on business logic and at the end ultimately it will query or save data to the database by using repository abstractions.&nbsp;&nbsp;</p>



<p>Important to note that this layer won’t be having an idea of the type of database which application is using. This layer will just depend upon the abstractions of the repository and not on the concrete implementation. The abstraction and corresponding concrete implementation will be configured together using a dependency injection container. And the concrete implementation will reside in the Persistence project which will talk in detail in a later section. This layer will also have corresponding handlers or subscribers for various domain events, and which will perform the operation as per the requirement.&nbsp;&nbsp;</p>



<pre class="wp-block-syntaxhighlighter-code">namespace CleanArchitecture.Application
{
    public class StudentService : IStudentService
    {
         private IStudentRepository _studentRepository;
         public StudentService(IStudentRepository studentRepository)
         {
             _studentRepository = studentRepository;
         }
         public void SaveStudent(SaveStudentRequest request)
         {
               // validate request data based on business logic
               // and create domain student object
               var newStudent = StudentValidator.validate(request);
               _studentRepository.Save(newStudent);
         }
    }
}</pre>



<p><strong>Infrastructure Layer&nbsp;</strong></p>



<p>This layer contains anything external. This layer will have things that are not directly related to your application domain but are needed as part of specific functionality. Consider in our School Management System, we want to notify each student about the timetable of the exam via their emails. So, to do so we need to use NuGet packages which makes email sending tasks easier, for example, the SendGrid NuGet package. So, the concrete implementation will reside in this project. And if you decide to put interface abstractions, then you can put that in the application layer. So that you can able to call those infrastructure services from business logic using abstractions.</p>



<pre class="wp-block-syntaxhighlighter-code">namespace CleanArchitecture.Infrastructure
{
    public class SendGridMailService : IMailService
    {
         public void SendMail(MailRequest request)
         {
              // mail sending logic.
         }
    }
}</pre>



<p><strong>Persistence Layer</strong>&nbsp;</p>



<p>This layer is our database access layer. This layer will have a concrete implementation of the repository abstractions which are defined by the application layer. In clean architecture, only this layer has knowledge about the actual underlying database provider. So, in the future, if there any need to change the database provider from let’s say SQL Server to MySQL, only changes will be made in this layer without affecting another layer. Or in other example, you want to use Dapper instead of Entity Framework, then you can swap or change implementation of abstractions without affecting other part of the system. From .NET perspective Entity Framework DbContext, Dapper related things and migrations will reside in this project.&nbsp;&nbsp;</p>



<pre class="wp-block-syntaxhighlighter-code">namespace CleanArchitecture.Persistence
{
    public class StudentRepository : IStudentRepository
    {
         private ApplicationDbContext _context;
         public StudentRepository(ApplicationDbContext context) 
         {
             _context = context;
         }

         public void SaveStudent(Student student)
         {
             _context.Students.Add(student);
             _context.SaveChanges();
         }
    }
}</pre>



<p><strong>Presentation Layer</strong>&nbsp;</p>



<p>Last but not least, the presentation layer is the outermost layer in Clean Architecture. From this layer, user will be able to interact with the whole system. So, we can consider this layer as the user input layer. This might be your API, MVC, or even blazor app. Point to note in the real world, there might be multiple presentation layers in the system which in turn contact the application layer for input and output. The presentation layer won&#8217;t be having any business or application logic, this layer will just accept an incoming request (mostly HTTP API request) and forwards it to the application layer for processing and waits for the reply from the application layer, once done it will return the data to the user if any.&nbsp;&nbsp;</p>



<pre class="wp-block-syntaxhighlighter-code">namespace CleanArchitecture.Presentation
{
    [ApiController]
    [Route("/api/[controller]")]
    public class StudentController : ControllerBase
    {
         private IStudentService _service;
         public StudentRepository(IStudentService service) 
         {
             _service = service;
         }

         public IActionResult SaveStudent(NewStudentRequest request)
         {
             _service.SaveStudent(request);
             return Ok();
         }
    }
}</pre>



<p>As you can see clean architecture is quite easy to understand. I will suggest you take a look at the following .NET template which is developed by Jason Tylor for Clean architecture implementation, so that you will have a head start in your project.&nbsp;</p>



<p><a rel="noreferrer noopener" target="_blank" href="https://github.com/jasontaylordev/CleanArchitecture">https://github.com/jasontaylordev/CleanArchitecture</a>&nbsp;</p>



<p>Thanks for reading, if you any questions or doubts please let me know in the comment section below.&nbsp;&nbsp;</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Log Entity Framework Core generated SQL in ASP.NET Core</title>
		<link>https://shreyasjejurkar.github.io/testwebsite/2020/11/15/log-entity-framework-core-generated-sql-in-asp-net-core/</link>
		
		<dc:creator><![CDATA[ShreyasJejurkar]]></dc:creator>
		<pubDate>Sun, 15 Nov 2020 14:03:20 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[dotnet]]></category>
		<category><![CDATA[entity framework]]></category>
		<category><![CDATA[SQL]]></category>
		<guid isPermaLink="false">https://mccshreyas.wordpress.com/?p=560</guid>

					<description><![CDATA[If you&#8217;re a .NET developer, then you are most probably familiar with Entity Framework data access technology that Microsoft provides for developers.But still, if you are not familiar then let me explain to you.Entity Framework is an Object (Relational) Mapper for database objects, meaning it lets you query database records using LINQ (Language-integrated query) and [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p class="has-text-align-justify">If you&#8217;re a .NET developer, then you are most probably familiar with Entity Framework data access technology that Microsoft provides for developers.<br>But still, if you are not familiar then let me explain to you.<br>Entity Framework is an Object (Relational) Mapper for database objects, meaning it lets you query database records using LINQ (Language-integrated query) and under the hood, it generates the resulting query based on your LINQ expression and executes it on the database, and if there are resulting records from SQL query then those records EF maps to your C# class objects, so that you don&#8217;t have to do that heavy lifting for mapping database values to C# objects and vice versa.</p>



<p class="has-text-align-justify">So the main point here is to understand that EF generates SQL query based on LINQ expression that the user has written. So while developing an ASP.NET Core Web application (Or any .NET application) or debugging a bug, you might need to see a generated query for your LINQ operation, and most probably you might want to log in to console so that based on it you can decide do you want to write a raw SQL query for given complex operation or wanna use EF generated query.<br>So by default when you add the EF Core package to the application, it does not log the query to the console, we have to tell EF core explicitly to log the generated query to the console (or might be somewhere else).<br>So in today&#8217;s post how we will see how we can do that. There are generally two ways to do so. But let&#8217;s proceed with a simple one.</p>



<p><strong>1<sup>st</sup> way</strong>:<br>This is the simplest way to start logging your generated query.<br>In your <code>DbContext</code> class, you need to override the <code>OnConfiguring</code> method and need to add the following line to <code>optionsBuilder</code>. As we can see the <code>LogTo</code> (added in .NET 5) method takes <code>Action&lt;string&gt;</code> as a parameter. For simplicity, I am logging queries to Console but you can log it anywhere and second parameter we have to pass the <code>LogLevel</code>. By adding this, the EF core will start logging generated SQL to Console. </p>



<pre class="wp-block-syntaxhighlighter-code"> protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder
                .EnableSensitiveDataLogging()
                .LogTo(Console.WriteLine, LogLevel.Information);

            base.OnConfiguring(optionsBuilder);
        }</pre>



<p><strong>2<sup>nd</sup> way</strong>:<br>This way is quite simple and configurable as well. In the previous method as we see we need to modify the actual C# code to tell EF to start logging generated SQL but in this way, we just need to add an entry in the Logging section under appsettings.json file.</p>



<pre class="wp-block-syntaxhighlighter-code"> "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "Microsoft.EntityFrameworkCore.Database.Command": "Information"
    }
  },</pre>



<p>After adding the above entry, the Logger abstraction will read this configuration at startup and will start logging EF generated SQL.<br>One of the advantages of this is like, in production scenarios if we don&#8217;t want to log the generated SQL to console, so in that, we just need to remove or comment out this entry in JSON file, by doing so the EF will no longer log the generated SQL and this does not require the application restart, as the configuration will automatically get reloaded.</p>



<p>By following any of the steps mentioned above, you will see generated SQL to logs. If you face any problem while doing so, please let me ping in comment section below. </p>



<p>Thanks for reading! </p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
